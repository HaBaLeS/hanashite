// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hanmessage.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct StreamHeader {
    // message fields
    pub magic: u32,
    pub length: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamHeader {
    fn default() -> &'a StreamHeader {
        <StreamHeader as ::protobuf::Message>::default_instance()
    }
}

impl StreamHeader {
    pub fn new() -> StreamHeader {
        ::std::default::Default::default()
    }

    // fixed32 magic = 1;


    pub fn get_magic(&self) -> u32 {
        self.magic
    }

    // fixed32 length = 2;


    pub fn get_length(&self) -> u32 {
        self.length
    }
}

impl ::protobuf::Message for StreamHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.magic = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.length = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.magic != 0 {
            my_size += 5;
        }
        if self.length != 0 {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.magic != 0 {
            os.write_fixed32(1, self.magic)?;
        }
        if self.length != 0 {
            os.write_fixed32(2, self.length)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamHeader {
        StreamHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "magic",
                |m: &StreamHeader| { &m.magic },
                |m: &mut StreamHeader| { &mut m.magic },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "length",
                |m: &StreamHeader| { &m.length },
                |m: &mut StreamHeader| { &mut m.length },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamHeader>(
                "StreamHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamHeader {
        static instance: ::protobuf::rt::LazyV2<StreamHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamHeader::new)
    }
}

impl ::protobuf::Clear for StreamHeader {
    fn clear(&mut self) {
        self.magic = 0;
        self.length = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HanMessage {
    // message fields
    pub message_id: ::bytes::Bytes,
    // message oneof groups
    pub msg: ::std::option::Option<HanMessage_oneof_msg>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HanMessage {
    fn default() -> &'a HanMessage {
        <HanMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HanMessage_oneof_msg {
    pub_key_auth(PubKeyAuth),
    auth_response(AuthResponse),
    challenge(Challenge),
    challenge_response(ChallengeResponse),
    channel_subscription(ChannelSubscription),
    channel_subscription_error(ChannelSubscriptionError),
    channel_subscription_event(ChannelSubscriptionEvent),
    channel_unsubscription_event(ChannelSubscriptionEvent),
}

impl HanMessage {
    pub fn new() -> HanMessage {
        ::std::default::Default::default()
    }

    // bytes message_id = 1;


    pub fn get_message_id(&self) -> &[u8] {
        &self.message_id
    }

    // .hanmessage.PubKeyAuth pub_key_auth = 2;


    pub fn get_pub_key_auth(&self) -> &PubKeyAuth {
        match self.msg {
            ::std::option::Option::Some(HanMessage_oneof_msg::pub_key_auth(ref v)) => v,
            _ => <PubKeyAuth as ::protobuf::Message>::default_instance(),
        }
    }

    // .hanmessage.AuthResponse auth_response = 3;


    pub fn get_auth_response(&self) -> &AuthResponse {
        match self.msg {
            ::std::option::Option::Some(HanMessage_oneof_msg::auth_response(ref v)) => v,
            _ => <AuthResponse as ::protobuf::Message>::default_instance(),
        }
    }

    // .hanmessage.Challenge challenge = 4;


    pub fn get_challenge(&self) -> &Challenge {
        match self.msg {
            ::std::option::Option::Some(HanMessage_oneof_msg::challenge(ref v)) => v,
            _ => <Challenge as ::protobuf::Message>::default_instance(),
        }
    }

    // .hanmessage.ChallengeResponse challenge_response = 5;


    pub fn get_challenge_response(&self) -> &ChallengeResponse {
        match self.msg {
            ::std::option::Option::Some(HanMessage_oneof_msg::challenge_response(ref v)) => v,
            _ => <ChallengeResponse as ::protobuf::Message>::default_instance(),
        }
    }

    // .hanmessage.ChannelSubscription channel_subscription = 6;


    pub fn get_channel_subscription(&self) -> &ChannelSubscription {
        match self.msg {
            ::std::option::Option::Some(HanMessage_oneof_msg::channel_subscription(ref v)) => v,
            _ => <ChannelSubscription as ::protobuf::Message>::default_instance(),
        }
    }

    // .hanmessage.ChannelSubscriptionError channel_subscription_error = 7;


    pub fn get_channel_subscription_error(&self) -> &ChannelSubscriptionError {
        match self.msg {
            ::std::option::Option::Some(HanMessage_oneof_msg::channel_subscription_error(ref v)) => v,
            _ => <ChannelSubscriptionError as ::protobuf::Message>::default_instance(),
        }
    }

    // .hanmessage.ChannelSubscriptionEvent channel_subscription_event = 8;


    pub fn get_channel_subscription_event(&self) -> &ChannelSubscriptionEvent {
        match self.msg {
            ::std::option::Option::Some(HanMessage_oneof_msg::channel_subscription_event(ref v)) => v,
            _ => <ChannelSubscriptionEvent as ::protobuf::Message>::default_instance(),
        }
    }

    // .hanmessage.ChannelSubscriptionEvent channel_unsubscription_event = 9;


    pub fn get_channel_unsubscription_event(&self) -> &ChannelSubscriptionEvent {
        match self.msg {
            ::std::option::Option::Some(HanMessage_oneof_msg::channel_unsubscription_event(ref v)) => v,
            _ => <ChannelSubscriptionEvent as ::protobuf::Message>::default_instance(),
        }
    }
}

impl ::protobuf::Message for HanMessage {
    fn is_initialized(&self) -> bool {
        if let Some(HanMessage_oneof_msg::pub_key_auth(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HanMessage_oneof_msg::auth_response(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HanMessage_oneof_msg::challenge(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HanMessage_oneof_msg::challenge_response(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HanMessage_oneof_msg::channel_subscription(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HanMessage_oneof_msg::channel_subscription_error(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HanMessage_oneof_msg::channel_subscription_event(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HanMessage_oneof_msg::channel_unsubscription_event(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.message_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(HanMessage_oneof_msg::pub_key_auth(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(HanMessage_oneof_msg::auth_response(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(HanMessage_oneof_msg::challenge(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(HanMessage_oneof_msg::challenge_response(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(HanMessage_oneof_msg::channel_subscription(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(HanMessage_oneof_msg::channel_subscription_error(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(HanMessage_oneof_msg::channel_subscription_event(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(HanMessage_oneof_msg::channel_unsubscription_event(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.message_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.message_id);
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &HanMessage_oneof_msg::pub_key_auth(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HanMessage_oneof_msg::auth_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HanMessage_oneof_msg::challenge(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HanMessage_oneof_msg::challenge_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HanMessage_oneof_msg::channel_subscription(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HanMessage_oneof_msg::channel_subscription_error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HanMessage_oneof_msg::channel_subscription_event(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HanMessage_oneof_msg::channel_unsubscription_event(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.message_id.is_empty() {
            os.write_bytes(1, &self.message_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &HanMessage_oneof_msg::pub_key_auth(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HanMessage_oneof_msg::auth_response(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HanMessage_oneof_msg::challenge(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HanMessage_oneof_msg::challenge_response(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HanMessage_oneof_msg::channel_subscription(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HanMessage_oneof_msg::channel_subscription_error(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HanMessage_oneof_msg::channel_subscription_event(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HanMessage_oneof_msg::channel_unsubscription_event(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HanMessage {
        HanMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "message_id",
                |m: &HanMessage| { &m.message_id },
                |m: &mut HanMessage| { &mut m.message_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PubKeyAuth>(
                "pub_key_auth",
                HanMessage::has_pub_key_auth,
                HanMessage::get_pub_key_auth,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AuthResponse>(
                "auth_response",
                HanMessage::has_auth_response,
                HanMessage::get_auth_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Challenge>(
                "challenge",
                HanMessage::has_challenge,
                HanMessage::get_challenge,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ChallengeResponse>(
                "challenge_response",
                HanMessage::has_challenge_response,
                HanMessage::get_challenge_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ChannelSubscription>(
                "channel_subscription",
                HanMessage::has_channel_subscription,
                HanMessage::get_channel_subscription,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ChannelSubscriptionError>(
                "channel_subscription_error",
                HanMessage::has_channel_subscription_error,
                HanMessage::get_channel_subscription_error,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ChannelSubscriptionEvent>(
                "channel_subscription_event",
                HanMessage::has_channel_subscription_event,
                HanMessage::get_channel_subscription_event,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ChannelSubscriptionEvent>(
                "channel_unsubscription_event",
                HanMessage::has_channel_unsubscription_event,
                HanMessage::get_channel_unsubscription_event,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HanMessage>(
                "HanMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HanMessage {
        static instance: ::protobuf::rt::LazyV2<HanMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HanMessage::new)
    }
}

impl ::protobuf::Clear for HanMessage {
    fn clear(&mut self) {
        self.message_id.clear();
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HanMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HanMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PubKeyAuth {
    // message fields
    pub username: ::std::string::String,
    pub public_key: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PubKeyAuth {
    fn default() -> &'a PubKeyAuth {
        <PubKeyAuth as ::protobuf::Message>::default_instance()
    }
}

impl PubKeyAuth {
    pub fn new() -> PubKeyAuth {
        ::std::default::Default::default()
    }

    // string username = 1;


    pub fn get_username(&self) -> &str {
        &self.username
    }

    // bytes public_key = 2;


    pub fn get_public_key(&self) -> &[u8] {
        &self.public_key
    }
}

impl ::protobuf::Message for PubKeyAuth {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.username)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.username);
        }
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.username.is_empty() {
            os.write_string(1, &self.username)?;
        }
        if !self.public_key.is_empty() {
            os.write_bytes(2, &self.public_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PubKeyAuth {
        PubKeyAuth::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "username",
                |m: &PubKeyAuth| { &m.username },
                |m: &mut PubKeyAuth| { &mut m.username },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "public_key",
                |m: &PubKeyAuth| { &m.public_key },
                |m: &mut PubKeyAuth| { &mut m.public_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PubKeyAuth>(
                "PubKeyAuth",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PubKeyAuth {
        static instance: ::protobuf::rt::LazyV2<PubKeyAuth> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PubKeyAuth::new)
    }
}

impl ::protobuf::Clear for PubKeyAuth {
    fn clear(&mut self) {
        self.username.clear();
        self.public_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PubKeyAuth {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PubKeyAuth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthResponse {
    // message fields
    pub result: AuthResponse_ResultState,
    pub user_id: u32,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthResponse {
    fn default() -> &'a AuthResponse {
        <AuthResponse as ::protobuf::Message>::default_instance()
    }
}

impl AuthResponse {
    pub fn new() -> AuthResponse {
        ::std::default::Default::default()
    }

    // .hanmessage.AuthResponse.ResultState result = 1;


    pub fn get_result(&self) -> AuthResponse_ResultState {
        self.result
    }

    // uint32 user_id = 2;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }

    // string message = 3;


    pub fn get_message(&self) -> &str {
        &self.message
    }
}

impl ::protobuf::Message for AuthResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != AuthResponse_ResultState::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != AuthResponse_ResultState::UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.result))?;
        }
        if self.user_id != 0 {
            os.write_uint32(2, self.user_id)?;
        }
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthResponse {
        AuthResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AuthResponse_ResultState>>(
                "result",
                |m: &AuthResponse| { &m.result },
                |m: &mut AuthResponse| { &mut m.result },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &AuthResponse| { &m.user_id },
                |m: &mut AuthResponse| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &AuthResponse| { &m.message },
                |m: &mut AuthResponse| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthResponse>(
                "AuthResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthResponse {
        static instance: ::protobuf::rt::LazyV2<AuthResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthResponse::new)
    }
}

impl ::protobuf::Clear for AuthResponse {
    fn clear(&mut self) {
        self.result = AuthResponse_ResultState::UNKNOWN;
        self.user_id = 0;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AuthResponse_ResultState {
    UNKNOWN = 0,
    SUCCESS = 1,
    BROKEN_KEY = 2,
    INVALID_CREDENTIALS = 3,
}

impl ::protobuf::ProtobufEnum for AuthResponse_ResultState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AuthResponse_ResultState> {
        match value {
            0 => ::std::option::Option::Some(AuthResponse_ResultState::UNKNOWN),
            1 => ::std::option::Option::Some(AuthResponse_ResultState::SUCCESS),
            2 => ::std::option::Option::Some(AuthResponse_ResultState::BROKEN_KEY),
            3 => ::std::option::Option::Some(AuthResponse_ResultState::INVALID_CREDENTIALS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AuthResponse_ResultState] = &[
            AuthResponse_ResultState::UNKNOWN,
            AuthResponse_ResultState::SUCCESS,
            AuthResponse_ResultState::BROKEN_KEY,
            AuthResponse_ResultState::INVALID_CREDENTIALS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<AuthResponse_ResultState>("AuthResponse.ResultState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for AuthResponse_ResultState {
}

impl ::std::default::Default for AuthResponse_ResultState {
    fn default() -> Self {
        AuthResponse_ResultState::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthResponse_ResultState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Challenge {
    // message fields
    pub chellange: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Challenge {
    fn default() -> &'a Challenge {
        <Challenge as ::protobuf::Message>::default_instance()
    }
}

impl Challenge {
    pub fn new() -> Challenge {
        ::std::default::Default::default()
    }

    // bytes chellange = 1;


    pub fn get_chellange(&self) -> &[u8] {
        &self.chellange
    }
}

impl ::protobuf::Message for Challenge {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.chellange)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.chellange.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.chellange);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.chellange.is_empty() {
            os.write_bytes(1, &self.chellange)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Challenge {
        Challenge::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "chellange",
                |m: &Challenge| { &m.chellange },
                |m: &mut Challenge| { &mut m.chellange },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Challenge>(
                "Challenge",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Challenge {
        static instance: ::protobuf::rt::LazyV2<Challenge> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Challenge::new)
    }
}

impl ::protobuf::Clear for Challenge {
    fn clear(&mut self) {
        self.chellange.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Challenge {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Challenge {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChallengeResponse {
    // message fields
    pub signature: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChallengeResponse {
    fn default() -> &'a ChallengeResponse {
        <ChallengeResponse as ::protobuf::Message>::default_instance()
    }
}

impl ChallengeResponse {
    pub fn new() -> ChallengeResponse {
        ::std::default::Default::default()
    }

    // bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
}

impl ::protobuf::Message for ChallengeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.signature.is_empty() {
            os.write_bytes(1, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChallengeResponse {
        ChallengeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "signature",
                |m: &ChallengeResponse| { &m.signature },
                |m: &mut ChallengeResponse| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChallengeResponse>(
                "ChallengeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChallengeResponse {
        static instance: ::protobuf::rt::LazyV2<ChallengeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChallengeResponse::new)
    }
}

impl ::protobuf::Clear for ChallengeResponse {
    fn clear(&mut self) {
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChallengeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChallengeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChannelSubscription {
    // message fields
    pub name: ::std::string::String,
    pub audio: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChannelSubscription {
    fn default() -> &'a ChannelSubscription {
        <ChannelSubscription as ::protobuf::Message>::default_instance()
    }
}

impl ChannelSubscription {
    pub fn new() -> ChannelSubscription {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }

    // bool audio = 2;


    pub fn get_audio(&self) -> bool {
        self.audio
    }
}

impl ::protobuf::Message for ChannelSubscription {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.audio = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.audio != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.audio != false {
            os.write_bool(2, self.audio)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChannelSubscription {
        ChannelSubscription::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ChannelSubscription| { &m.name },
                |m: &mut ChannelSubscription| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "audio",
                |m: &ChannelSubscription| { &m.audio },
                |m: &mut ChannelSubscription| { &mut m.audio },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChannelSubscription>(
                "ChannelSubscription",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChannelSubscription {
        static instance: ::protobuf::rt::LazyV2<ChannelSubscription> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChannelSubscription::new)
    }
}

impl ::protobuf::Clear for ChannelSubscription {
    fn clear(&mut self) {
        self.name.clear();
        self.audio = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChannelSubscription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelSubscription {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChannelSubscriptionError {
    // message fields
    pub reason: ChannelSubscriptionError_Reason,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChannelSubscriptionError {
    fn default() -> &'a ChannelSubscriptionError {
        <ChannelSubscriptionError as ::protobuf::Message>::default_instance()
    }
}

impl ChannelSubscriptionError {
    pub fn new() -> ChannelSubscriptionError {
        ::std::default::Default::default()
    }

    // .hanmessage.ChannelSubscriptionError.Reason reason = 1;


    pub fn get_reason(&self) -> ChannelSubscriptionError_Reason {
        self.reason
    }
}

impl ::protobuf::Message for ChannelSubscriptionError {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.reason, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.reason != ChannelSubscriptionError_Reason::DOES_NOT_EXIST {
            my_size += ::protobuf::rt::enum_size(1, self.reason);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.reason != ChannelSubscriptionError_Reason::DOES_NOT_EXIST {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.reason))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChannelSubscriptionError {
        ChannelSubscriptionError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ChannelSubscriptionError_Reason>>(
                "reason",
                |m: &ChannelSubscriptionError| { &m.reason },
                |m: &mut ChannelSubscriptionError| { &mut m.reason },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChannelSubscriptionError>(
                "ChannelSubscriptionError",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChannelSubscriptionError {
        static instance: ::protobuf::rt::LazyV2<ChannelSubscriptionError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChannelSubscriptionError::new)
    }
}

impl ::protobuf::Clear for ChannelSubscriptionError {
    fn clear(&mut self) {
        self.reason = ChannelSubscriptionError_Reason::DOES_NOT_EXIST;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChannelSubscriptionError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelSubscriptionError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ChannelSubscriptionError_Reason {
    DOES_NOT_EXIST = 0,
    PERMISSION_DENIED = 1,
}

impl ::protobuf::ProtobufEnum for ChannelSubscriptionError_Reason {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChannelSubscriptionError_Reason> {
        match value {
            0 => ::std::option::Option::Some(ChannelSubscriptionError_Reason::DOES_NOT_EXIST),
            1 => ::std::option::Option::Some(ChannelSubscriptionError_Reason::PERMISSION_DENIED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChannelSubscriptionError_Reason] = &[
            ChannelSubscriptionError_Reason::DOES_NOT_EXIST,
            ChannelSubscriptionError_Reason::PERMISSION_DENIED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ChannelSubscriptionError_Reason>("ChannelSubscriptionError.Reason", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ChannelSubscriptionError_Reason {
}

impl ::std::default::Default for ChannelSubscriptionError_Reason {
    fn default() -> Self {
        ChannelSubscriptionError_Reason::DOES_NOT_EXIST
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelSubscriptionError_Reason {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChannelSubscriptionEvent {
    // message fields
    pub user_id: u32,
    pub user_name: ::std::string::String,
    pub channel_name: ::std::string::String,
    pub flags: ::std::vec::Vec<ChannelSubscriptionEvent_Flag>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChannelSubscriptionEvent {
    fn default() -> &'a ChannelSubscriptionEvent {
        <ChannelSubscriptionEvent as ::protobuf::Message>::default_instance()
    }
}

impl ChannelSubscriptionEvent {
    pub fn new() -> ChannelSubscriptionEvent {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }

    // string user_name = 2;


    pub fn get_user_name(&self) -> &str {
        &self.user_name
    }

    // string channel_name = 3;


    pub fn get_channel_name(&self) -> &str {
        &self.channel_name
    }

    // repeated .hanmessage.ChannelSubscriptionEvent.Flag flags = 4;


    pub fn get_flags(&self) -> &[ChannelSubscriptionEvent_Flag] {
        &self.flags
    }
}

impl ::protobuf::Message for ChannelSubscriptionEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel_name)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.flags, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.user_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.user_name);
        }
        if !self.channel_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.channel_name);
        }
        for value in &self.flags {
            my_size += ::protobuf::rt::enum_size(4, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if !self.user_name.is_empty() {
            os.write_string(2, &self.user_name)?;
        }
        if !self.channel_name.is_empty() {
            os.write_string(3, &self.channel_name)?;
        }
        for v in &self.flags {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChannelSubscriptionEvent {
        ChannelSubscriptionEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &ChannelSubscriptionEvent| { &m.user_id },
                |m: &mut ChannelSubscriptionEvent| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_name",
                |m: &ChannelSubscriptionEvent| { &m.user_name },
                |m: &mut ChannelSubscriptionEvent| { &mut m.user_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "channel_name",
                |m: &ChannelSubscriptionEvent| { &m.channel_name },
                |m: &mut ChannelSubscriptionEvent| { &mut m.channel_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ChannelSubscriptionEvent_Flag>>(
                "flags",
                |m: &ChannelSubscriptionEvent| { &m.flags },
                |m: &mut ChannelSubscriptionEvent| { &mut m.flags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChannelSubscriptionEvent>(
                "ChannelSubscriptionEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChannelSubscriptionEvent {
        static instance: ::protobuf::rt::LazyV2<ChannelSubscriptionEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChannelSubscriptionEvent::new)
    }
}

impl ::protobuf::Clear for ChannelSubscriptionEvent {
    fn clear(&mut self) {
        self.user_id = 0;
        self.user_name.clear();
        self.channel_name.clear();
        self.flags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChannelSubscriptionEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelSubscriptionEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ChannelSubscriptionEvent_Flag {
    AUDIO_RECEIVE = 0,
    AUDIO_SEND = 1,
    CHAT_SEND = 2,
    MODERATOR = 3,
}

impl ::protobuf::ProtobufEnum for ChannelSubscriptionEvent_Flag {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChannelSubscriptionEvent_Flag> {
        match value {
            0 => ::std::option::Option::Some(ChannelSubscriptionEvent_Flag::AUDIO_RECEIVE),
            1 => ::std::option::Option::Some(ChannelSubscriptionEvent_Flag::AUDIO_SEND),
            2 => ::std::option::Option::Some(ChannelSubscriptionEvent_Flag::CHAT_SEND),
            3 => ::std::option::Option::Some(ChannelSubscriptionEvent_Flag::MODERATOR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChannelSubscriptionEvent_Flag] = &[
            ChannelSubscriptionEvent_Flag::AUDIO_RECEIVE,
            ChannelSubscriptionEvent_Flag::AUDIO_SEND,
            ChannelSubscriptionEvent_Flag::CHAT_SEND,
            ChannelSubscriptionEvent_Flag::MODERATOR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ChannelSubscriptionEvent_Flag>("ChannelSubscriptionEvent.Flag", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ChannelSubscriptionEvent_Flag {
}

impl ::std::default::Default for ChannelSubscriptionEvent_Flag {
    fn default() -> Self {
        ChannelSubscriptionEvent_Flag::AUDIO_RECEIVE
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelSubscriptionEvent_Flag {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChannelUnsubscriptionEvent {
    // message fields
    pub user_id: u32,
    pub user_name: ::std::string::String,
    pub channel_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChannelUnsubscriptionEvent {
    fn default() -> &'a ChannelUnsubscriptionEvent {
        <ChannelUnsubscriptionEvent as ::protobuf::Message>::default_instance()
    }
}

impl ChannelUnsubscriptionEvent {
    pub fn new() -> ChannelUnsubscriptionEvent {
        ::std::default::Default::default()
    }

    // uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id
    }

    // string user_name = 2;


    pub fn get_user_name(&self) -> &str {
        &self.user_name
    }

    // string channel_name = 3;


    pub fn get_channel_name(&self) -> &str {
        &self.channel_name
    }
}

impl ::protobuf::Message for ChannelUnsubscriptionEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.user_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.user_name);
        }
        if !self.channel_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.channel_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_uint32(1, self.user_id)?;
        }
        if !self.user_name.is_empty() {
            os.write_string(2, &self.user_name)?;
        }
        if !self.channel_name.is_empty() {
            os.write_string(3, &self.channel_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChannelUnsubscriptionEvent {
        ChannelUnsubscriptionEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "user_id",
                |m: &ChannelUnsubscriptionEvent| { &m.user_id },
                |m: &mut ChannelUnsubscriptionEvent| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_name",
                |m: &ChannelUnsubscriptionEvent| { &m.user_name },
                |m: &mut ChannelUnsubscriptionEvent| { &mut m.user_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "channel_name",
                |m: &ChannelUnsubscriptionEvent| { &m.channel_name },
                |m: &mut ChannelUnsubscriptionEvent| { &mut m.channel_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChannelUnsubscriptionEvent>(
                "ChannelUnsubscriptionEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChannelUnsubscriptionEvent {
        static instance: ::protobuf::rt::LazyV2<ChannelUnsubscriptionEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChannelUnsubscriptionEvent::new)
    }
}

impl ::protobuf::Clear for ChannelUnsubscriptionEvent {
    fn clear(&mut self) {
        self.user_id = 0;
        self.user_name.clear();
        self.channel_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChannelUnsubscriptionEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelUnsubscriptionEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10hanmessage.proto\x12\nhanmessage\"<\n\x0cStreamHeader\x12\x14\n\
    \x05magic\x18\x01\x20\x01(\x07R\x05magic\x12\x16\n\x06length\x18\x02\x20\
    \x01(\x07R\x06length\"\xc2\x05\n\nHanMessage\x12\x1d\n\nmessage_id\x18\
    \x01\x20\x01(\x0cR\tmessageId\x12:\n\x0cpub_key_auth\x18\x02\x20\x01(\
    \x0b2\x16.hanmessage.PubKeyAuthH\0R\npubKeyAuth\x12?\n\rauth_response\
    \x18\x03\x20\x01(\x0b2\x18.hanmessage.AuthResponseH\0R\x0cauthResponse\
    \x125\n\tchallenge\x18\x04\x20\x01(\x0b2\x15.hanmessage.ChallengeH\0R\tc\
    hallenge\x12N\n\x12challenge_response\x18\x05\x20\x01(\x0b2\x1d.hanmessa\
    ge.ChallengeResponseH\0R\x11challengeResponse\x12T\n\x14channel_subscrip\
    tion\x18\x06\x20\x01(\x0b2\x1f.hanmessage.ChannelSubscriptionH\0R\x13cha\
    nnelSubscription\x12d\n\x1achannel_subscription_error\x18\x07\x20\x01(\
    \x0b2$.hanmessage.ChannelSubscriptionErrorH\0R\x18channelSubscriptionErr\
    or\x12d\n\x1achannel_subscription_event\x18\x08\x20\x01(\x0b2$.hanmessag\
    e.ChannelSubscriptionEventH\0R\x18channelSubscriptionEvent\x12h\n\x1ccha\
    nnel_unsubscription_event\x18\t\x20\x01(\x0b2$.hanmessage.ChannelSubscri\
    ptionEventH\0R\x1achannelUnsubscriptionEventB\x05\n\x03msg\"G\n\nPubKeyA\
    uth\x12\x1a\n\x08username\x18\x01\x20\x01(\tR\x08username\x12\x1d\n\npub\
    lic_key\x18\x02\x20\x01(\x0cR\tpublicKey\"\xd1\x01\n\x0cAuthResponse\x12\
    <\n\x06result\x18\x01\x20\x01(\x0e2$.hanmessage.AuthResponse.ResultState\
    R\x06result\x12\x17\n\x07user_id\x18\x02\x20\x01(\rR\x06userId\x12\x18\n\
    \x07message\x18\x03\x20\x01(\tR\x07message\"P\n\x0bResultState\x12\x0b\n\
    \x07UNKNOWN\x10\0\x12\x0b\n\x07SUCCESS\x10\x01\x12\x0e\n\nBROKEN_KEY\x10\
    \x02\x12\x17\n\x13INVALID_CREDENTIALS\x10\x03\")\n\tChallenge\x12\x1c\n\
    \tchellange\x18\x01\x20\x01(\x0cR\tchellange\"1\n\x11ChallengeResponse\
    \x12\x1c\n\tsignature\x18\x01\x20\x01(\x0cR\tsignature\"?\n\x13ChannelSu\
    bscription\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05au\
    dio\x18\x02\x20\x01(\x08R\x05audio\"\x94\x01\n\x18ChannelSubscriptionErr\
    or\x12C\n\x06reason\x18\x01\x20\x01(\x0e2+.hanmessage.ChannelSubscriptio\
    nError.ReasonR\x06reason\"3\n\x06Reason\x12\x12\n\x0eDOES_NOT_EXIST\x10\
    \0\x12\x15\n\x11PERMISSION_DENIED\x10\x01\"\xfd\x01\n\x18ChannelSubscrip\
    tionEvent\x12\x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userId\x12\x1b\n\t\
    user_name\x18\x02\x20\x01(\tR\x08userName\x12!\n\x0cchannel_name\x18\x03\
    \x20\x01(\tR\x0bchannelName\x12?\n\x05flags\x18\x04\x20\x03(\x0e2).hanme\
    ssage.ChannelSubscriptionEvent.FlagR\x05flags\"G\n\x04Flag\x12\x11\n\rAU\
    DIO_RECEIVE\x10\0\x12\x0e\n\nAUDIO_SEND\x10\x01\x12\r\n\tCHAT_SEND\x10\
    \x02\x12\r\n\tMODERATOR\x10\x03\"u\n\x1aChannelUnsubscriptionEvent\x12\
    \x17\n\x07user_id\x18\x01\x20\x01(\rR\x06userId\x12\x1b\n\tuser_name\x18\
    \x02\x20\x01(\tR\x08userName\x12!\n\x0cchannel_name\x18\x03\x20\x01(\tR\
    \x0bchannelNameB\rZ\x0b.;serializeb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
