// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `udpmessage.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct HanUdpMessage {
    // message fields
    pub connection_id: ::bytes::Bytes,
    // message oneof groups
    pub msg: ::std::option::Option<HanUdpMessage_oneof_msg>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HanUdpMessage {
    fn default() -> &'a HanUdpMessage {
        <HanUdpMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HanUdpMessage_oneof_msg {
    audio_frame(AudioPacket),
    ping_packet(PingPacket),
}

impl HanUdpMessage {
    pub fn new() -> HanUdpMessage {
        ::std::default::Default::default()
    }

    // bytes connection_id = 111;


    pub fn get_connection_id(&self) -> &[u8] {
        &self.connection_id
    }

    // .udpmessage.AudioPacket audio_frame = 100;


    pub fn get_audio_frame(&self) -> &AudioPacket {
        match self.msg {
            ::std::option::Option::Some(HanUdpMessage_oneof_msg::audio_frame(ref v)) => v,
            _ => <AudioPacket as ::protobuf::Message>::default_instance(),
        }
    }

    // .udpmessage.PingPacket ping_packet = 101;


    pub fn get_ping_packet(&self) -> &PingPacket {
        match self.msg {
            ::std::option::Option::Some(HanUdpMessage_oneof_msg::ping_packet(ref v)) => v,
            _ => <PingPacket as ::protobuf::Message>::default_instance(),
        }
    }
}

impl ::protobuf::Message for HanUdpMessage {
    fn is_initialized(&self) -> bool {
        if let Some(HanUdpMessage_oneof_msg::audio_frame(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HanUdpMessage_oneof_msg::ping_packet(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                111 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.connection_id)?;
                },
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(HanUdpMessage_oneof_msg::audio_frame(is.read_message()?));
                },
                101 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(HanUdpMessage_oneof_msg::ping_packet(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(111, &self.connection_id);
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &HanUdpMessage_oneof_msg::audio_frame(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HanUdpMessage_oneof_msg::ping_packet(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.connection_id.is_empty() {
            os.write_bytes(111, &self.connection_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &HanUdpMessage_oneof_msg::audio_frame(ref v) => {
                    os.write_tag(100, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HanUdpMessage_oneof_msg::ping_packet(ref v) => {
                    os.write_tag(101, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HanUdpMessage {
        HanUdpMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "connection_id",
                |m: &HanUdpMessage| { &m.connection_id },
                |m: &mut HanUdpMessage| { &mut m.connection_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AudioPacket>(
                "audio_frame",
                HanUdpMessage::has_audio_frame,
                HanUdpMessage::get_audio_frame,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PingPacket>(
                "ping_packet",
                HanUdpMessage::has_ping_packet,
                HanUdpMessage::get_ping_packet,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HanUdpMessage>(
                "HanUdpMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HanUdpMessage {
        static instance: ::protobuf::rt::LazyV2<HanUdpMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HanUdpMessage::new)
    }
}

impl ::protobuf::Clear for HanUdpMessage {
    fn clear(&mut self) {
        self.connection_id.clear();
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HanUdpMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HanUdpMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PingPacket {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PingPacket {
    fn default() -> &'a PingPacket {
        <PingPacket as ::protobuf::Message>::default_instance()
    }
}

impl PingPacket {
    pub fn new() -> PingPacket {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PingPacket {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PingPacket {
        PingPacket::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PingPacket>(
                "PingPacket",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PingPacket {
        static instance: ::protobuf::rt::LazyV2<PingPacket> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PingPacket::new)
    }
}

impl ::protobuf::Clear for PingPacket {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PingPacket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingPacket {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AudioPacket {
    // message fields
    pub channel_id: ::bytes::Bytes,
    pub sequence_id: u64,
    pub data: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AudioPacket {
    fn default() -> &'a AudioPacket {
        <AudioPacket as ::protobuf::Message>::default_instance()
    }
}

impl AudioPacket {
    pub fn new() -> AudioPacket {
        ::std::default::Default::default()
    }

    // bytes channel_id = 110;


    pub fn get_channel_id(&self) -> &[u8] {
        &self.channel_id
    }

    // uint64 sequence_id = 112;


    pub fn get_sequence_id(&self) -> u64 {
        self.sequence_id
    }

    // bytes data = 113;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
}

impl ::protobuf::Message for AudioPacket {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                110 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.channel_id)?;
                },
                112 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence_id = tmp;
                },
                113 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.channel_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(110, &self.channel_id);
        }
        if self.sequence_id != 0 {
            my_size += ::protobuf::rt::value_size(112, self.sequence_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(113, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.channel_id.is_empty() {
            os.write_bytes(110, &self.channel_id)?;
        }
        if self.sequence_id != 0 {
            os.write_uint64(112, self.sequence_id)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(113, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AudioPacket {
        AudioPacket::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "channel_id",
                |m: &AudioPacket| { &m.channel_id },
                |m: &mut AudioPacket| { &mut m.channel_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence_id",
                |m: &AudioPacket| { &m.sequence_id },
                |m: &mut AudioPacket| { &mut m.sequence_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                "data",
                |m: &AudioPacket| { &m.data },
                |m: &mut AudioPacket| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AudioPacket>(
                "AudioPacket",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AudioPacket {
        static instance: ::protobuf::rt::LazyV2<AudioPacket> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AudioPacket::new)
    }
}

impl ::protobuf::Clear for AudioPacket {
    fn clear(&mut self) {
        self.channel_id.clear();
        self.sequence_id = 0;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AudioPacket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AudioPacket {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10udpmessage.proto\x12\nudpmessage\"\xb2\x01\n\rHanUdpMessage\x12#\n\
    \rconnection_id\x18o\x20\x01(\x0cR\x0cconnectionId\x12:\n\x0baudio_frame\
    \x18d\x20\x01(\x0b2\x17.udpmessage.AudioPacketH\0R\naudioFrame\x129\n\
    \x0bping_packet\x18e\x20\x01(\x0b2\x16.udpmessage.PingPacketH\0R\npingPa\
    cketB\x05\n\x03msg\"\x0c\n\nPingPacket\"a\n\x0bAudioPacket\x12\x1d\n\nch\
    annel_id\x18n\x20\x01(\x0cR\tchannelId\x12\x1f\n\x0bsequence_id\x18p\x20\
    \x01(\x04R\nsequenceId\x12\x12\n\x04data\x18q\x20\x01(\x0cR\x04dataB\rZ\
    \x0b.;serializeb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
